"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SupportedLocales = exports.Interpolation = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Interpolation = /*#__PURE__*/function () {
  function Interpolation(value, keys) {
    _classCallCheck(this, Interpolation);
    _defineProperty(this, "value", void 0);
    _defineProperty(this, "keys", void 0);
    this.value = value;
    this.keys = keys;
  }
  _createClass(Interpolation, [{
    key: "toString",
    value: function toString() {
      return this.value;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.value;
    }
  }]);
  return Interpolation;
}();
/**
 * Extracts the union of all the leaf keys in a catalog
 */
exports.Interpolation = Interpolation;
var SupportedLocales = /*#__PURE__*/function (SupportedLocales) {
  SupportedLocales["de_DE"] = "de-DE";
  SupportedLocales["en_US"] = "en-US";
  SupportedLocales["es_ES"] = "es-ES";
  SupportedLocales["es_CL"] = "es-CL";
  SupportedLocales["es_EC"] = "es-EC";
  SupportedLocales["es_MX"] = "es-MX";
  SupportedLocales["es_PE"] = "es-PE";
  SupportedLocales["fr_FR"] = "fr-FR";
  SupportedLocales["it_IT"] = "it-IT";
  SupportedLocales["pt_BR"] = "pt-BR";
  SupportedLocales["ko_KR"] = "ko-KR";
  SupportedLocales["ja_JP"] = "ja-JP";
  SupportedLocales["zh_CN"] = "zh-CN";
  SupportedLocales["zh_TW"] = "zh-TW";
  return SupportedLocales;
}({}); // A Locale is the string actually used in the frontend, like 'en-US'
// This is aliased to make a slightly easier to read type
exports.SupportedLocales = SupportedLocales;