function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
export class Interpolation {
  constructor(value, keys) {
    _defineProperty(this, "value", void 0);
    _defineProperty(this, "keys", void 0);
    this.value = value;
    this.keys = keys;
  }
  toString() {
    return this.value;
  }
  toJSON() {
    return this.value;
  }
}

/**
 * Extracts the union of all the leaf keys in a catalog
 */

export var SupportedLocales = /*#__PURE__*/function (SupportedLocales) {
  SupportedLocales["de_DE"] = "de-DE";
  SupportedLocales["en_US"] = "en-US";
  SupportedLocales["es_ES"] = "es-ES";
  SupportedLocales["es_CL"] = "es-CL";
  SupportedLocales["es_EC"] = "es-EC";
  SupportedLocales["es_MX"] = "es-MX";
  SupportedLocales["es_PE"] = "es-PE";
  SupportedLocales["fr_FR"] = "fr-FR";
  SupportedLocales["it_IT"] = "it-IT";
  SupportedLocales["pt_BR"] = "pt-BR";
  SupportedLocales["ko_KR"] = "ko-KR";
  SupportedLocales["ja_JP"] = "ja-JP";
  SupportedLocales["zh_CN"] = "zh-CN";
  SupportedLocales["zh_TW"] = "zh-TW";
  return SupportedLocales;
}({});

// A Locale is the string actually used in the frontend, like 'en-US'
// This is aliased to make a slightly easier to read type