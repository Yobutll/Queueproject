function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? Object(arguments[i]) : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { User } from './user';
import { Permissions } from './permissions';
import { eg } from '@cloudflare/util-en-garde';
import { MembershipsPolicy } from './policy';
export var AccountSettings = eg.object({
  access_approval_expiry: eg.union([eg.string, eg.null]),
  enforce_twofactor: eg.boolean,
  api_access_enabled: eg.boolean
});
export var AccountMeta = eg.object({
  has_pro_zones: eg.boolean,
  has_business_zones: eg.boolean,
  has_enterprise_zones: eg.boolean
});
export var AccountLegacyFlagStatus = eg.object({
  enabled: eg.boolean
});
export var AccountLegacyFlagEnterpriseZoneQuota = eg.object({
  maximum: eg.number,
  current: eg.number,
  available: eg.number
});
export var AccountLegacyFlags = eg.object({
  dns_firewall: AccountLegacyFlagStatus,
  china_network_visible: AccountLegacyFlagStatus,
  china_private_key_network_deployment: AccountLegacyFlagStatus,
  cname_signup: AccountLegacyFlagStatus,
  custom_pages: AccountLegacyFlagStatus,
  enterprise_zone_quota: AccountLegacyFlagEnterpriseZoneQuota
});
export var AccountQuotaValues = eg.object({
  remaining: eg.number,
  used: eg.number
});
export var AccountQuota = eg.object({
  bulk_pro: AccountQuotaValues.optional,
  bulk_biz: AccountQuotaValues.optional,
  bulk_ent: AccountQuotaValues.optional
});
export var AccountRole = eg.object({
  id: eg.string,
  name: eg.string,
  description: eg.string,
  permissions: Permissions
});
export var AccountMemberResourceGroup = eg.object({
  id: eg.string,
  name: eg.string.optional,
  metadata: eg.object({
    editable: eg.boolean
  }).optional
});
export var AccountMemberPermissionGroup = eg.object({
  id: eg.string,
  name: eg.string.optional
});
export var AccountMemberPolicy = eg.array(eg.object({
  id: eg.string.optional,
  access: eg.string,
  permission_groups: eg.array(AccountMemberPermissionGroup),
  resource_groups: eg.array(AccountMemberResourceGroup)
}));
export var AccountMember = eg.object({
  id: eg.string,
  user: eg.pick(User, ['id', 'first_name', 'last_name', 'email', 'two_factor_authentication_enabled']),
  status: eg.union([eg.literal('accepted'), eg.literal('pending'), eg.literal('rejected')]),
  api_access_enabled: eg.union([eg.boolean, eg.null]).optional,
  roles: eg.array(AccountRole),
  policies: eg.array(MembershipsPolicy).optional
});
export var WebhookEvent = eg.object({
  'ssl.certificate.deletion.failed': eg.boolean,
  'ssl.certificate.deletion.succeeded': eg.boolean,
  'ssl.certificate.deployment.failed': eg.boolean,
  'ssl.certificate.deployment.succeeded': eg.boolean,
  'ssl.certificate.renewal.failed': eg.boolean,
  'ssl.certificate.renewal.succeeded': eg.boolean,
  'ssl.certificate.renewal.upcoming_certificate_expiration_notification': eg.boolean,
  'ssl.certificate.validation.failed': eg.boolean,
  'ssl.certificate.validation.succeeded': eg.boolean,
  'ssl.custom_hostname_certificate.validation.failed': eg.boolean,
  'ssl.custom_hostname_certificate.validation.succeeded': eg.boolean,
  'ssl.dedicated_certificate.issuance.failed': eg.boolean,
  'ssl.dedicated_certificate.issuance.succeeded': eg.boolean
});
// Triggers incomplete
export var AccountWebhook = eg.object({
  id: eg.string,
  category: eg.string,
  triggers: eg.any,
  url: eg.string,
  secret: eg.string,
  events: WebhookEvent
});
export var AccountInvite = eg.object({
  account_pubname: eg.string,
  user_email: eg.string
});
export var Account = eg.object({
  id: eg.string,
  name: eg.string,
  type: eg.string.optional,
  created_on: eg.string.optional,
  settings: AccountSettings,
  meta: AccountMeta,
  legacy_flags: AccountLegacyFlags
});
export var AccountLegoState = eg.union([eg.literal('pending'), eg.literal('completed'), eg.literal('signed'), eg.literal('')]);
export var AccountSubscriptionType = eg.union([eg.literal('paygo'), eg.literal('contract'), eg.literal('')]);
export var AccountLegoProduct = eg.union([eg.literal('access'), eg.literal('rate_limiting'), eg.literal('load_balancing'), eg.literal('stream'), eg.literal('workers'), eg.literal('r2'), eg.literal('argo'), eg.literal('bot_management'), eg.literal('')]);
export var AccountLegoContact = eg.object({
  first_name: eg.string,
  last_name: eg.string,
  email: eg.string,
  organization: eg.string.optional
});
export var AccountLegoContactAPI = eg.object({
  contact: AccountLegoContact
});
export var AccountLegoContract = eg.object({
  lego_state: AccountLegoState.optional,
  subscription_type: AccountSubscriptionType.optional
});
export var AccountFirewallRuleAction = eg.union([eg.literal('allow'), eg.literal('block'), eg.literal('challenge'), eg.literal('js_challenge'), eg.literal('log'), eg.literal('managed_challenge'), eg.literal('skip'), eg.literal('ddos_dynamic'), eg.literal('select_config')]);
export var AccountFirewallSensitivityLevels = eg.union([eg.literal('default'), eg.literal('medium'), eg.literal('low'), eg.literal('eoff')]);
var baseRuleProperties = {
  id: eg.string,
  expression: eg.string.optional,
  description: eg.string.optional,
  version: eg.string.optional,
  enabled: eg.boolean.optional,
  last_updated: eg.string.optional,
  ref: eg.string.optional
};
export var AccountFirewallRule = eg.object(_objectSpread({}, baseRuleProperties, {
  action: AccountFirewallRuleAction,
  categories: eg.array(eg.string).optional,
  action_parameters: eg.object({
    ruleset: eg.string.optional
  }).optional,
  score_threshold: eg.number.optional,
  created: eg.string.optional,
  allowed_override_actions: eg.array(eg.string).optional
}));
var CategoryOverride = eg.object({
  category: eg.string,
  action: AccountFirewallRuleAction.optional,
  enabled: eg.boolean.optional,
  sensitivity_level: AccountFirewallSensitivityLevels.optional
});
var RuleOverride = eg.object({
  id: eg.string,
  action: AccountFirewallRuleAction.optional,
  enabled: eg.boolean.optional,
  sensitivity_level: AccountFirewallSensitivityLevels.optional
});
export var AccountFirewallRuleOverride = eg.object(_objectSpread({}, baseRuleProperties, {
  action: eg.literal('execute'),
  action_parameters: eg.object({
    id: eg.string,
    version: eg.string.optional,
    matched_data: eg.object({
      public_key: eg.union([eg.string, eg.null])
    }).optional,
    overrides: eg.object({
      action: AccountFirewallRuleAction.optional,
      enabled: eg.boolean.optional,
      categories: eg.array(CategoryOverride).optional,
      rules: eg.array(RuleOverride).optional,
      sensitivity_level: AccountFirewallSensitivityLevels.optional
    }).optional,
    increment: eg.number.optional
  })
}));
// Bypass rules/rulesets with skip action: https://wiki.cfops.it/x/bodSF
var AccountFirewallRuleSkipOverride = eg.object(_objectSpread({}, baseRuleProperties, {
  action: eg.literal('skip'),
  action_parameters: eg.object({
    rulesets: eg.array(eg.string).optional,
    ruleset: eg.literal('current').optional,
    rules: eg.record(eg.string, eg.array(eg.string)).optional
  }),
  logging: eg.object({
    enabled: eg.boolean
  }).optional
}));
export var AccountFirewallRuleHTTPApplication = eg.object(_objectSpread({}, baseRuleProperties, {
  action: eg.literal('select_config'),
  position: eg.object({
    index: eg.number,
    after: eg.string,
    before: eg.string
  }),
  action_parameters: eg.object({
    http_application: eg.string,
    version: eg.number,
    lock_by_default: eg.boolean
  })
}));
export var AccountFirewallRulesetKind = eg.union([eg.literal('root'), eg.literal('managed'), eg.literal('custom')]);
export var AccountFirewallRuleset = eg.object({
  id: eg.string,
  name: eg.string,
  description: eg.string,
  kind: AccountFirewallRulesetKind,
  version: eg.string,
  last_updated: eg.string,
  rules: eg.array(AccountFirewallRule).optional,
  phase: eg.string.optional
});
export var AccountFirewallRulesetOverride = eg.object({
  id: eg.string,
  name: eg.string,
  description: eg.string,
  kind: AccountFirewallRulesetKind,
  phase: eg.string.optional,
  version: eg.string,
  last_updated: eg.string,
  rules: eg.array(eg.union([AccountFirewallRuleOverride, AccountFirewallRuleSkipOverride])).optional
});
export var AccountFirewallRulesetHTTPApplication = eg.object({
  id: eg.string,
  name: eg.string,
  description: eg.string,
  kind: AccountFirewallRulesetKind,
  phase: eg.string.optional,
  version: eg.string,
  last_updated: eg.string,
  rules: eg.array(AccountFirewallRuleHTTPApplication)
});
var RuleRateLimit = eg.object({
  characteristics: eg.array(eg.string),
  period: eg.number,
  requests_per_period: eg.number,
  mitigation_timeout: eg.number,
  requests_to_origin: eg.boolean,
  counting_expression: eg.string
});

// Common properties across all rules.
var BaseRule = eg.object({
  description: eg.string,
  enabled: eg.boolean,
  id: eg.string.optional,
  last_updated: eg.string.optional,
  version: eg.string.optional,
  expression: eg.string.optional,
  ratelimit: RuleRateLimit.optional,
  action: eg.string.optional,
  action_parameters: eg.object({
    id: eg.string,
    version: eg.string
  }).optional
});

// Common properties across all rulesets.
var BaseRuleset = eg.object({
  id: eg.string,
  name: eg.string,
  description: eg.string,
  version: eg.string,
  last_updated: eg.string,
  enabled: eg.boolean
});

// Properties unique to phase http_request_firewall_custom of kind root.
var AccountCustomRulesetEntrypoint = eg.intersection([BaseRuleset, eg.object({
  kind: eg.literal('root'),
  phase: eg.literal('http_request_firewall_custom'),
  rules: eg.array(eg.intersection([BaseRule, eg.object({
    action: eg.literal('execute'),
    action_parameters: eg.object({
      id: eg.string,
      version: eg.string,
      // TODO: set override type
      override: eg.any.optional,
      matched_data: eg.object({
        public_key: eg.string
      }).optional
    }),
    expression: eg.string
  })])).optional
})]);
// Properties unique to phase 'http_request_firewall_managed' of kind root.
var AccountManagedEntrypoint = eg.intersection([BaseRuleset, eg.object({
  kind: eg.literal('root'),
  phase: eg.literal('http_request_firewall_managed'),
  rules: eg.array(eg.intersection([BaseRule, eg.object({
    action: eg.literal('execute'),
    action_parameters: eg.object({
      id: eg.string,
      version: eg.string
    }),
    expression: eg.string
  })])).optional
})]);
var CustomRuleActions = eg.union([eg.literal('managed_challenge'), eg.literal('log'), eg.literal('block'), eg.literal('js_challenge'), eg.literal('skip'), eg.literal('challenge')]);

// Properties unique to phase http_request_firewall_custom of kind custom.
var AccountCustomRuleset = eg.intersection([BaseRuleset, eg.object({
  kind: eg.literal('custom'),
  phase: eg.literal('http_request_firewall_custom'),
  rules: eg.array(eg.intersection([eg.object({
    action: CustomRuleActions
  }), BaseRule]))
})]);
// Properties unique to phase http_ratelimit of kind custom.
var AccountRateLimitingRuleset = eg.intersection([BaseRuleset, eg.object({
  kind: eg.literal('custom'),
  phase: eg.literal('http_ratelimit'),
  rules: eg.array(eg.intersection([eg.object({
    action: CustomRuleActions,
    ratelimit: RuleRateLimit
  }), BaseRule]))
})]);
var AccountIDSRuleset = eg.intersection([BaseRuleset, eg.object({
  kind: eg.literal('managed'),
  phase: eg.literal('magic_transit_ids_managed'),
  rules: eg.array(eg.intersection([eg.object({
    action: eg.literal('execute'),
    action_parameters: eg.object({
      id: eg.string,
      version: eg.string
    })
  }), BaseRule]))
})]);
var AccountIDSEntrypoint = eg.intersection([BaseRuleset, eg.object({
  kind: eg.literal('root'),
  phase: eg.literal('magic_transit_ids_managed'),
  rules: eg.array(eg.intersection([eg.object({
    id: eg.string,
    action: eg.literal('execute'),
    action_parameters: eg.object({
      id: eg.string,
      version: eg.string
    })
  }), BaseRule]))
})]);
var AccountRedirectRuleset = eg.intersection([BaseRuleset, eg.object({
  kind: eg.literal('root'),
  phase: eg.literal('http_request_redirect'),
  rules: eg.array(eg.object(_objectSpread({}, baseRuleProperties, {
    action: eg.literal('redirect'),
    action_parameters: eg.object({
      id: eg.string,
      from_list: eg.object({
        key: eg.string,
        name: eg.string
      })
    })
  })))
})]);
var GenericRuleset = eg.union([AccountRateLimitingRuleset, AccountCustomRulesetEntrypoint, AccountCustomRuleset, AccountIDSRuleset, AccountManagedEntrypoint, AccountIDSEntrypoint, AccountRedirectRuleset]);